"use strict";(()=>{var e={};e.id=363,e.ids=[363,3538],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4770:e=>{e.exports=require("crypto")},8994:(e,r,a)=>{a.r(r),a.d(r,{originalPathname:()=>g,patchFetch:()=>D,requestAsyncStorage:()=>p,routeModule:()=>d,serverHooks:()=>A,staticGenerationAsyncStorage:()=>m});var t={};a.r(t),a.d(t,{GET:()=>u,dynamic:()=>l});var n=a(9303),s=a(8716),o=a(670),i=a(7070),c=a(3538);let l="force-dynamic";async function u(e){try{console.log("\uD83D\uDD25 NUCLEAR OPTION: Delete and recreate admin with strong password");let e=await c.prisma.admin.deleteMany({});console.log(`🗑️ Deleted ${e.count} existing admin accounts`);let r=a(7515),t="Admin2024!SecurePass#rootmr",n=await r.hash(t,12),s=await c.prisma.admin.create({data:{username:"admin",password:n,role:"SUPER_ADMIN"}});return console.log("✅ Created new admin with strong password"),i.NextResponse.json({success:!0,message:"NUCLEAR RESET: All old admins deleted, new secure admin created",credentials:{username:"admin",password:t},action:"nuclear_reset",deletedCount:e.count,newAdmin:{id:s.id,username:s.username,role:s.role}})}catch(e){return console.error("❌ Nuclear reset error:",e),i.NextResponse.json({success:!1,error:"Failed to nuclear reset: "+(e instanceof Error?e.message:String(e))},{status:500})}}let d=new n.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/nuclear-admin-reset/route",pathname:"/api/nuclear-admin-reset",filename:"route",bundlePath:"app/api/nuclear-admin-reset/route"},resolvedPagePath:"C:\\Users\\hAiQ\\Desktop\\cup\\src\\app\\api\\nuclear-admin-reset\\route.ts",nextConfigOutput:"",userland:t}),{requestAsyncStorage:p,staticGenerationAsyncStorage:m,serverHooks:A}=d,g="/api/nuclear-admin-reset/route";function D(){return(0,o.patchFetch)({serverHooks:A,staticGenerationAsyncStorage:m})}},3538:(e,r,a)=>{a.d(r,{prisma:()=>s});var t=a(3524);let n=globalThis;process.env.DATABASE_URL||(console.error("❌ DATABASE_URL environment variable is not set!"),console.log("\uD83D\uDD27 Please set DATABASE_URL in your Render environment variables"));let s=n.prisma??new t.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}}});s.$connect().then(()=>{console.log("✅ Database connected successfully")}).catch(e=>{console.error("❌ Database connection failed:",e)})}};var r=require("../../../webpack-runtime.js");r.C(e);var a=e=>r(r.s=e),t=r.X(0,[8948,5972,7515],()=>a(8994));module.exports=t})();
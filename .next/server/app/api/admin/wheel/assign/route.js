"use strict";(()=>{var e={};e.id=2165,e.ids=[2165,3538],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8893:e=>{e.exports=require("buffer")},4770:e=>{e.exports=require("crypto")},6162:e=>{e.exports=require("stream")},1764:e=>{e.exports=require("util")},7194:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>v,patchFetch:()=>x,requestAsyncStorage:()=>h,routeModule:()=>m,serverHooks:()=>g,staticGenerationAsyncStorage:()=>f});var s={};t.r(s),t.d(s,{POST:()=>d,dynamic:()=>p});var n=t(9303),a=t(8716),i=t(670),o=t(7070),u=t(3538),l=t(5456);async function c(e){let r=e.cookies.get("admin_token")?.value;if(!r)return null;let t=(0,l.WX)(r);if(!t||!t.userId.startsWith("admin_"))return null;let s=t.userId.replace("admin_","");return await u.prisma.admin.findUnique({where:{id:s}})}let p="force-dynamic";async function d(e){try{if(!await c(e))return o.NextResponse.json({error:"Nicht autorisiert"},{status:401});let{userId:r,teamId:t}=await e.json();if(!r||!t)return o.NextResponse.json({error:"User ID und Team ID sind erforderlich"},{status:400});console.log(`🎯 Assigning user ${r} to team ${t}`);let s=await u.prisma.user.findUnique({where:{id:r}});if(!s)return o.NextResponse.json({error:"User nicht gefunden"},{status:404});if(!s.isVerified)return o.NextResponse.json({error:"User ist nicht verifiziert"},{status:400});if(s.teamId)return o.NextResponse.json({error:"User ist bereits in einem Team"},{status:400});let n=await u.prisma.team.findUnique({where:{id:t}});if(!n)return o.NextResponse.json({error:"Team nicht gefunden"},{status:404});if(await u.prisma.user.count({where:{teamId:t}})>=6)return o.NextResponse.json({error:"Team ist bereits voll (6/6 Mitglieder)"},{status:400});return await u.prisma.user.update({where:{id:r},data:{teamId:t}}),console.log(`✅ User ${r} assigned to team ${t} (${n.name})`),o.NextResponse.json({message:"User erfolgreich zum Team hinzugef\xfcgt",assignment:{userId:r,teamId:t,teamName:n.name}})}catch(e){return console.error("Team assignment error:",e),o.NextResponse.json({error:"Interner Serverfehler"},{status:500})}}let m=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/admin/wheel/assign/route",pathname:"/api/admin/wheel/assign",filename:"route",bundlePath:"app/api/admin/wheel/assign/route"},resolvedPagePath:"C:\\Users\\hAiQ\\Desktop\\cup\\src\\app\\api\\admin\\wheel\\assign\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:h,staticGenerationAsyncStorage:f,serverHooks:g}=m,v="/api/admin/wheel/assign/route";function x(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:f})}},5456:(e,r,t)=>{t.d(r,{Gv:()=>o,RA:()=>u,WX:()=>l,c_:()=>i});var s=t(8691),n=t(1482),a=t.n(n);let i=async e=>s.ZP.hash(e,12),o=async(e,r)=>s.ZP.compare(e,r),u=e=>{let r=process.env.JWT_SECRET||"tournament-secret-key-2024-fallback";return a().sign({userId:e},r,{expiresIn:"7d"})},l=e=>{try{let r=process.env.JWT_SECRET||"tournament-secret-key-2024-fallback";return a().verify(e,r)}catch{return null}}},3538:(e,r,t)=>{t.d(r,{prisma:()=>a});var s=t(3524);let n=globalThis;process.env.DATABASE_URL||(console.error("❌ DATABASE_URL environment variable is not set!"),console.log("\uD83D\uDD27 Please set DATABASE_URL in your Render environment variables"));let a=n.prisma??new s.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}}});a.$connect().then(()=>{console.log("✅ Database connected successfully")}).catch(e=>{console.error("❌ Database connection failed:",e)})}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[8948,5972,8691,1482],()=>t(7194));module.exports=s})();
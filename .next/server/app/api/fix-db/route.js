"use strict";(()=>{var e={};e.id=86,e.ids=[86,3538],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},188:(e,a,o)=>{o.r(a),o.d(a,{originalPathname:()=>E,patchFetch:()=>p,requestAsyncStorage:()=>A,routeModule:()=>d,serverHooks:()=>m,staticGenerationAsyncStorage:()=>T});var t={};o.r(t),o.d(t,{GET:()=>u,dynamic:()=>l});var r=o(9303),s=o(8716),i=o(670),c=o(7070),n=o(3538);let l="force-dynamic";async function u(e){try{return console.log("\uD83D\uDD27 Starting database schema fix..."),await n.prisma.$executeRaw`ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "inGameNameVerified" BOOLEAN DEFAULT false`,console.log("✅ Added inGameNameVerified column"),await n.prisma.$executeRaw`ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "inGameRankVerified" BOOLEAN DEFAULT false`,console.log("✅ Added inGameRankVerified column"),await n.prisma.$executeRaw`ALTER TABLE "Team" ADD COLUMN IF NOT EXISTS "imageUrl" TEXT`,console.log("✅ Added imageUrl column to Team"),await n.prisma.$executeRaw`ALTER TABLE "Team" ADD COLUMN IF NOT EXISTS "position" INTEGER DEFAULT 0`,console.log("✅ Added position column to Team"),await n.prisma.$executeRaw`ALTER TABLE "Match" ADD COLUMN IF NOT EXISTS "bracket" TEXT DEFAULT 'winner'`,console.log("✅ Added bracket column to Match"),await n.prisma.$executeRaw`ALTER TABLE "Match" ADD COLUMN IF NOT EXISTS "matchNumber" INTEGER DEFAULT 1`,console.log("✅ Added matchNumber column to Match"),await n.prisma.$executeRaw`ALTER TABLE "Match" ADD COLUMN IF NOT EXISTS "team1Score" INTEGER DEFAULT 0`,console.log("✅ Added team1Score column to Match"),await n.prisma.$executeRaw`ALTER TABLE "Match" ADD COLUMN IF NOT EXISTS "team2Score" INTEGER DEFAULT 0`,console.log("✅ Added team2Score column to Match"),await n.prisma.$executeRaw`ALTER TABLE "Match" ADD COLUMN IF NOT EXISTS "isLive" BOOLEAN DEFAULT false`,console.log("✅ Added isLive column to Match"),console.log("\uD83C\uDF89 Database schema fix completed successfully!"),c.NextResponse.json({success:!0,message:"Database schema fixed successfully! \uD83C\uDF89"})}catch(e){return console.error("❌ Database fix error:",e),c.NextResponse.json({success:!1,error:e instanceof Error?e.message:"Unknown error"},{status:500})}}let d=new r.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/fix-db/route",pathname:"/api/fix-db",filename:"route",bundlePath:"app/api/fix-db/route"},resolvedPagePath:"C:\\Users\\hAiQ\\Desktop\\cup\\src\\app\\api\\fix-db\\route.ts",nextConfigOutput:"",userland:t}),{requestAsyncStorage:A,staticGenerationAsyncStorage:T,serverHooks:m}=d,E="/api/fix-db/route";function p(){return(0,i.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:T})}},3538:(e,a,o)=>{o.d(a,{prisma:()=>s});var t=o(3524);let r=globalThis;process.env.DATABASE_URL||(console.error("❌ DATABASE_URL environment variable is not set!"),console.log("\uD83D\uDD27 Please set DATABASE_URL in your Render environment variables"));let s=r.prisma??new t.PrismaClient({log:["error"],datasources:{db:{url:process.env.DATABASE_URL}}});s.$connect().then(()=>{console.log("✅ Database connected successfully")}).catch(e=>{console.error("❌ Database connection failed:",e)})}};var a=require("../../../webpack-runtime.js");a.C(e);var o=e=>a(a.s=e),t=a.X(0,[8948,5972],()=>o(188));module.exports=t})();